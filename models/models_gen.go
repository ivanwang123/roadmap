// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package models

import (
	"fmt"
	"io"
	"strconv"
)

type CheckpointStatus struct {
	UserID       int    `json:"userId"`
	CheckpointID int    `json:"checkpointId"`
	RoadmapID    int    `json:"roadmapId"`
	Status       Status `json:"status"`
}

type FollowRoadmap struct {
	RoadmapID int `json:"roadmapId"`
}

type GetRoadmap struct {
	ID int `json:"id"`
}

type GetRoadmaps struct {
	CursorID    int    `json:"cursorId"`
	CursorValue string `json:"cursorValue"`
	Sort        Sort   `json:"sort"`
}

type GetUser struct {
	ID int `json:"id"`
}

type Login struct {
	Username *string `json:"username"`
	Email    *string `json:"email"`
	Password string  `json:"password"`
}

type NewCheckpoint struct {
	Title        string   `json:"title"`
	Instructions string   `json:"instructions"`
	Links        []string `json:"links"`
	RoadmapID    int      `json:"roadmapId"`
}

type NewRoadmap struct {
	Title       string `json:"title"`
	Description string `json:"description"`
	CreatorID   int    `json:"creatorId"`
}

type NewUser struct {
	Username string `json:"username"`
	Email    string `json:"email"`
	Password string `json:"password"`
}

type UpdateStatus struct {
	CheckpointID int    `json:"checkpointId"`
	Status       Status `json:"status"`
}

type Sort string

const (
	SortNewest           Sort = "NEWEST"
	SortOldest           Sort = "OLDEST"
	SortMostFollowers    Sort = "MOST_FOLLOWERS"
	SortMostCheckpoints  Sort = "MOST_CHECKPOINTS"
	SortLeastCheckpoints Sort = "LEAST_CHECKPOINTS"
)

var AllSort = []Sort{
	SortNewest,
	SortOldest,
	SortMostFollowers,
	SortMostCheckpoints,
	SortLeastCheckpoints,
}

func (e Sort) IsValid() bool {
	switch e {
	case SortNewest, SortOldest, SortMostFollowers, SortMostCheckpoints, SortLeastCheckpoints:
		return true
	}
	return false
}

func (e Sort) String() string {
	return string(e)
}

func (e *Sort) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = Sort(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid Sort", str)
	}
	return nil
}

func (e Sort) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type Status string

const (
	StatusComplete   Status = "COMPLETE"
	StatusIncomplete Status = "INCOMPLETE"
	StatusSkip       Status = "SKIP"
)

var AllStatus = []Status{
	StatusComplete,
	StatusIncomplete,
	StatusSkip,
}

func (e Status) IsValid() bool {
	switch e {
	case StatusComplete, StatusIncomplete, StatusSkip:
		return true
	}
	return false
}

func (e Status) String() string {
	return string(e)
}

func (e *Status) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = Status(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid Status", str)
	}
	return nil
}

func (e Status) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}
