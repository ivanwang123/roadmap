// Code generated by mockery v0.0.0-dev. DO NOT EDIT.

package mocks

import (
	context "context"

	models "github.com/ivanwang123/roadmap/models"
	mock "github.com/stretchr/testify/mock"

	transaction "github.com/ivanwang123/roadmap/internal/common/transaction"
)

// CheckpointStatusMockRepo is an autogenerated mock type for the Repository type
type CheckpointStatusMockRepo struct {
	mock.Mock
}

// CreateMany provides a mock function with given fields: ctx, input
func (_m *CheckpointStatusMockRepo) CreateMany(ctx context.Context, input []*models.CreateCheckpointStatus) error {
	ret := _m.Called(ctx, input)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, []*models.CreateCheckpointStatus) error); ok {
		r0 = rf(ctx, input)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteMany provides a mock function with given fields: ctx, input
func (_m *CheckpointStatusMockRepo) DeleteMany(ctx context.Context, input *models.DeleteManyCheckpointStatus) error {
	ret := _m.Called(ctx, input)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *models.DeleteManyCheckpointStatus) error); ok {
		r0 = rf(ctx, input)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Get provides a mock function with given fields: ctx, input
func (_m *CheckpointStatusMockRepo) Get(ctx context.Context, input *models.GetCheckpointStatus) (*models.CheckpointStatus, error) {
	ret := _m.Called(ctx, input)

	var r0 *models.CheckpointStatus
	if rf, ok := ret.Get(0).(func(context.Context, *models.GetCheckpointStatus) *models.CheckpointStatus); ok {
		r0 = rf(ctx, input)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.CheckpointStatus)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *models.GetCheckpointStatus) error); ok {
		r1 = rf(ctx, input)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetIn provides a mock function with given fields: ctx, userID, IDs
func (_m *CheckpointStatusMockRepo) GetIn(ctx context.Context, userID int, IDs []string) ([]*models.CheckpointStatus, error) {
	ret := _m.Called(ctx, userID, IDs)

	var r0 []*models.CheckpointStatus
	if rf, ok := ret.Get(0).(func(context.Context, int, []string) []*models.CheckpointStatus); ok {
		r0 = rf(ctx, userID, IDs)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*models.CheckpointStatus)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, int, []string) error); ok {
		r1 = rf(ctx, userID, IDs)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Update provides a mock function with given fields: ctx, userID, input
func (_m *CheckpointStatusMockRepo) Update(ctx context.Context, userID int, input *models.UpdateStatus) error {
	ret := _m.Called(ctx, userID, input)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, int, *models.UpdateStatus) error); ok {
		r0 = rf(ctx, userID, input)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// WithTransaction provides a mock function with given fields: ctx, fn
func (_m *CheckpointStatusMockRepo) WithTransaction(ctx context.Context, fn transaction.TxFunc) error {
	ret := _m.Called(ctx, fn)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, transaction.TxFunc) error); ok {
		r0 = rf(ctx, fn)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}
