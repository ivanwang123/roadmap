// Code generated by mockery v0.0.0-dev. DO NOT EDIT.

package mocks

import (
	context "context"

	models "github.com/ivanwang123/roadmap/models"
	mock "github.com/stretchr/testify/mock"

	transaction "github.com/ivanwang123/roadmap/internal/common/transaction"
)

// UserMockRepo is an autogenerated mock type for the Repository type
type UserMockRepo struct {
	mock.Mock
}

// Create provides a mock function with given fields: ctx, input
func (_m *UserMockRepo) Create(ctx context.Context, input *models.NewUser) (*models.User, error) {
	ret := _m.Called(ctx, input)

	var r0 *models.User
	if rf, ok := ret.Get(0).(func(context.Context, *models.NewUser) *models.User); ok {
		r0 = rf(ctx, input)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.User)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *models.NewUser) error); ok {
		r1 = rf(ctx, input)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetAll provides a mock function with given fields: ctx
func (_m *UserMockRepo) GetAll(ctx context.Context) ([]*models.User, error) {
	ret := _m.Called(ctx)

	var r0 []*models.User
	if rf, ok := ret.Get(0).(func(context.Context) []*models.User); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*models.User)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetByEmail provides a mock function with given fields: ctx, email
func (_m *UserMockRepo) GetByEmail(ctx context.Context, email string) (*models.User, error) {
	ret := _m.Called(ctx, email)

	var r0 *models.User
	if rf, ok := ret.Get(0).(func(context.Context, string) *models.User); ok {
		r0 = rf(ctx, email)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.User)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, email)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetByID provides a mock function with given fields: ctx, ID
func (_m *UserMockRepo) GetByID(ctx context.Context, ID int) (*models.User, error) {
	ret := _m.Called(ctx, ID)

	var r0 *models.User
	if rf, ok := ret.Get(0).(func(context.Context, int) *models.User); ok {
		r0 = rf(ctx, ID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.User)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, int) error); ok {
		r1 = rf(ctx, ID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetByRoadmapFollowing provides a mock function with given fields: ctx, roadmapID
func (_m *UserMockRepo) GetByRoadmapFollowing(ctx context.Context, roadmapID int) ([]*models.User, error) {
	ret := _m.Called(ctx, roadmapID)

	var r0 []*models.User
	if rf, ok := ret.Get(0).(func(context.Context, int) []*models.User); ok {
		r0 = rf(ctx, roadmapID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*models.User)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, int) error); ok {
		r1 = rf(ctx, roadmapID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetByUsername provides a mock function with given fields: ctx, username
func (_m *UserMockRepo) GetByUsername(ctx context.Context, username string) (*models.User, error) {
	ret := _m.Called(ctx, username)

	var r0 *models.User
	if rf, ok := ret.Get(0).(func(context.Context, string) *models.User); ok {
		r0 = rf(ctx, username)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.User)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, username)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetIn provides a mock function with given fields: ctx, IDs
func (_m *UserMockRepo) GetIn(ctx context.Context, IDs []string) ([]*models.User, error) {
	ret := _m.Called(ctx, IDs)

	var r0 []*models.User
	if rf, ok := ret.Get(0).(func(context.Context, []string) []*models.User); ok {
		r0 = rf(ctx, IDs)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*models.User)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, []string) error); ok {
		r1 = rf(ctx, IDs)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// WithTransaction provides a mock function with given fields: ctx, fn
func (_m *UserMockRepo) WithTransaction(ctx context.Context, fn transaction.TxFunc) error {
	ret := _m.Called(ctx, fn)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, transaction.TxFunc) error); ok {
		r0 = rf(ctx, fn)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}
